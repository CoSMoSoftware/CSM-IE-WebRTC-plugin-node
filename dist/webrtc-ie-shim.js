(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.webrtcIeShim = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

// TODO: Check if we are in correct IE version

// Add objects to global
var MediaDevices = require("./lib/MediaDevices.js");
var VideoRenderer = require("./lib/VideoRenderer.js");
navigator.mediaDevices = new MediaDevices();

window.RTCPeerConnection = require("./lib/RTCPeerConnection.js");
window.MediaStream = require("./lib/MediaStream.js");
window.MediaStreamTrack = require("./lib/MediaStreamTrack.js");

function checkNewNode(node) {
	if (node.nodeName === 'video')
		// Observe changes in the video element.
		VideoRenderer.handle(node);else for (var j = 0; j < node.childNodes.length; j++) {
		checkNewNode(node.childNodes.item(j));
	}
}

function checkRemovedNode(node) {
	if (node.nodeName === 'video') VideoRenderer.unhandle(node);else for (var j = 0; j < node.childNodes.length; j++) {
		checkRemovedNode(node.childNodes.item(j));
	}
}

// DOM mutation observer to check when a new video element has been added to the DOM
var domObserver = new MutationObserver(function (mutations) {
	for (var i = 0, numMutations = mutations.length; i < numMutations; i++) {
		var mutation = mutations[i];

		// Check if there has been addition or deletion of nodes.
		if (mutation.type !== 'childList') continue;

		// Check added nodes.
		for (var j = 0, numNodes = mutation.addedNodes.length; j < numNodes; j++) {
			//Check node recursively
			checkNewNode(mutation.addedNodes[j]);
		} // Check removed nodes.
		for (j = 0, numNodes = mutation.removedNodes.length; j < numNodes; j++) {
			//Check node recursively
			checkRemovedNode(mutation.removedNodes[j]);
		}
	}
});

//Get all video elements already present
var videos = document.getElementsByTagName("video");

//Handle them
for (var i = 0; i < videos.length; ++i) {
	VideoRenderer.handle(videos[i]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk1lZGlhRGV2aWNlcyIsInJlcXVpcmUiLCJWaWRlb1JlbmRlcmVyIiwibmF2aWdhdG9yIiwibWVkaWFEZXZpY2VzIiwid2luZG93IiwiUlRDUGVlckNvbm5lY3Rpb24iLCJNZWRpYVN0cmVhbSIsIk1lZGlhU3RyZWFtVHJhY2siLCJjaGVja05ld05vZGUiLCJub2RlIiwibm9kZU5hbWUiLCJoYW5kbGUiLCJqIiwiY2hpbGROb2RlcyIsImxlbmd0aCIsIml0ZW0iLCJjaGVja1JlbW92ZWROb2RlIiwidW5oYW5kbGUiLCJkb21PYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJpIiwibnVtTXV0YXRpb25zIiwibXV0YXRpb24iLCJ0eXBlIiwibnVtTm9kZXMiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwidmlkZW9zIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSJdLCJtYXBwaW5ncyI6Ijs7QUFDQTs7QUFFQTtBQUNBLElBQUlBLGVBQWdCQyxRQUFRLHVCQUFSLENBQXBCO0FBQ0EsSUFBSUMsZ0JBQWlCRCxRQUFRLHdCQUFSLENBQXJCO0FBQ0FFLFVBQVVDLFlBQVYsR0FBMEIsSUFBSUosWUFBSixFQUExQjs7QUFFQUssT0FBT0MsaUJBQVAsR0FBMkJMLFFBQVEsNEJBQVIsQ0FBM0I7QUFDQUksT0FBT0UsV0FBUCxHQUFzQk4sUUFBUSxzQkFBUixDQUF0QjtBQUNBSSxPQUFPRyxnQkFBUCxHQUEyQlAsUUFBUSwyQkFBUixDQUEzQjs7QUFHQSxTQUFTUSxZQUFULENBQXNCQyxJQUF0QixFQUNBO0FBQ0MsS0FBSUEsS0FBS0MsUUFBTCxLQUFrQixPQUF0QjtBQUNDO0FBQ0FULGdCQUFjVSxNQUFkLENBQXFCRixJQUFyQixFQUZELEtBSUMsS0FBSyxJQUFJRyxJQUFJLENBQWIsRUFBZ0JBLElBQUlILEtBQUtJLFVBQUwsQ0FBZ0JDLE1BQXBDLEVBQTRDRixHQUE1QztBQUNDSixlQUFhQyxLQUFLSSxVQUFMLENBQWdCRSxJQUFoQixDQUFxQkgsQ0FBckIsQ0FBYjtBQUREO0FBRUQ7O0FBRUQsU0FBU0ksZ0JBQVQsQ0FBMEJQLElBQTFCLEVBQ0E7QUFDQyxLQUFJQSxLQUFLQyxRQUFMLEtBQWtCLE9BQXRCLEVBQ0NULGNBQWNnQixRQUFkLENBQXVCUixJQUF2QixFQURELEtBR0MsS0FBSyxJQUFJRyxJQUFJLENBQWIsRUFBZ0JBLElBQUlILEtBQUtJLFVBQUwsQ0FBZ0JDLE1BQXBDLEVBQTRDRixHQUE1QztBQUNDSSxtQkFBaUJQLEtBQUtJLFVBQUwsQ0FBZ0JFLElBQWhCLENBQXFCSCxDQUFyQixDQUFqQjtBQUREO0FBRUQ7O0FBRUQ7QUFDQSxJQUFJTSxjQUFjLElBQUlDLGdCQUFKLENBQXFCLFVBQVVDLFNBQVYsRUFBcUI7QUFDM0QsTUFBSyxJQUFJQyxJQUFJLENBQVIsRUFBV0MsZUFBZUYsVUFBVU4sTUFBekMsRUFBaURPLElBQUlDLFlBQXJELEVBQW1FRCxHQUFuRSxFQUNBO0FBQ0MsTUFBSUUsV0FBV0gsVUFBVUMsQ0FBVixDQUFmOztBQUVBO0FBQ0EsTUFBSUUsU0FBU0MsSUFBVCxLQUFrQixXQUF0QixFQUNDOztBQUVEO0FBQ0EsT0FBSyxJQUFJWixJQUFJLENBQVIsRUFBV2EsV0FBV0YsU0FBU0csVUFBVCxDQUFvQlosTUFBL0MsRUFBdURGLElBQUlhLFFBQTNELEVBQXFFYixHQUFyRTtBQUNDO0FBQ0FKLGdCQUFhZSxTQUFTRyxVQUFULENBQW9CZCxDQUFwQixDQUFiO0FBRkQsR0FSRCxDQVlDO0FBQ0EsT0FBS0EsSUFBSSxDQUFKLEVBQU9hLFdBQVdGLFNBQVNJLFlBQVQsQ0FBc0JiLE1BQTdDLEVBQXFERixJQUFJYSxRQUF6RCxFQUFtRWIsR0FBbkU7QUFDQztBQUNBSSxvQkFBaUJPLFNBQVNJLFlBQVQsQ0FBc0JmLENBQXRCLENBQWpCO0FBRkQ7QUFHQTtBQUNELENBbkJpQixDQUFsQjs7QUFxQkE7QUFDQSxJQUFJZ0IsU0FBU0MsU0FBU0Msb0JBQVQsQ0FBOEIsT0FBOUIsQ0FBYjs7QUFFQTtBQUNBLEtBQUssSUFBSVQsSUFBRSxDQUFYLEVBQWNBLElBQUVPLE9BQU9kLE1BQXZCLEVBQStCLEVBQUVPLENBQWpDO0FBQ0NwQixlQUFjVSxNQUFkLENBQXFCaUIsT0FBT1AsQ0FBUCxDQUFyQjtBQUREIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8vIFRPRE86IENoZWNrIGlmIHdlIGFyZSBpbiBjb3JyZWN0IElFIHZlcnNpb25cclxuXHJcbi8vIEFkZCBvYmplY3RzIHRvIGdsb2JhbFxyXG52YXIgTWVkaWFEZXZpY2VzXHQgPSByZXF1aXJlKFwiLi9saWIvTWVkaWFEZXZpY2VzLmpzXCIpO1xyXG52YXIgVmlkZW9SZW5kZXJlclx0ID0gcmVxdWlyZShcIi4vbGliL1ZpZGVvUmVuZGVyZXIuanNcIik7XHJcbm5hdmlnYXRvci5tZWRpYURldmljZXNcdCA9IG5ldyBNZWRpYURldmljZXMoKTtcclxuXHJcbndpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiA9IHJlcXVpcmUoXCIuL2xpYi9SVENQZWVyQ29ubmVjdGlvbi5qc1wiKTtcclxud2luZG93Lk1lZGlhU3RyZWFtXHQgPSByZXF1aXJlKFwiLi9saWIvTWVkaWFTdHJlYW0uanNcIik7XHJcbndpbmRvdy5NZWRpYVN0cmVhbVRyYWNrXHQgPSByZXF1aXJlKFwiLi9saWIvTWVkaWFTdHJlYW1UcmFjay5qc1wiKTtcclxuXHJcblxyXG5mdW5jdGlvbiBjaGVja05ld05vZGUobm9kZSkgXHJcbntcclxuXHRpZiAobm9kZS5ub2RlTmFtZSA9PT0gJ3ZpZGVvJykgXHJcblx0XHQvLyBPYnNlcnZlIGNoYW5nZXMgaW4gdGhlIHZpZGVvIGVsZW1lbnQuXHJcblx0XHRWaWRlb1JlbmRlcmVyLmhhbmRsZShub2RlKTtcclxuXHRlbHNlXHJcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7IGorKykgXHJcblx0XHRcdGNoZWNrTmV3Tm9kZShub2RlLmNoaWxkTm9kZXMuaXRlbShqKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrUmVtb3ZlZE5vZGUobm9kZSlcclxue1xyXG5cdGlmIChub2RlLm5vZGVOYW1lID09PSAndmlkZW8nKSBcclxuXHRcdFZpZGVvUmVuZGVyZXIudW5oYW5kbGUobm9kZSk7XHJcblx0ZWxzZVxyXG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBub2RlLmNoaWxkTm9kZXMubGVuZ3RoOyBqKyspIFxyXG5cdFx0XHRjaGVja1JlbW92ZWROb2RlKG5vZGUuY2hpbGROb2Rlcy5pdGVtKGopKTtcclxufVxyXG5cclxuLy8gRE9NIG11dGF0aW9uIG9ic2VydmVyIHRvIGNoZWNrIHdoZW4gYSBuZXcgdmlkZW8gZWxlbWVudCBoYXMgYmVlbiBhZGRlZCB0byB0aGUgRE9NXHJcbnZhciBkb21PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcclxuXHRmb3IgKHZhciBpID0gMCwgbnVtTXV0YXRpb25zID0gbXV0YXRpb25zLmxlbmd0aDsgaSA8IG51bU11dGF0aW9uczsgaSsrKVxyXG5cdHtcclxuXHRcdHZhciBtdXRhdGlvbiA9IG11dGF0aW9uc1tpXTtcclxuXHJcblx0XHQvLyBDaGVjayBpZiB0aGVyZSBoYXMgYmVlbiBhZGRpdGlvbiBvciBkZWxldGlvbiBvZiBub2Rlcy5cclxuXHRcdGlmIChtdXRhdGlvbi50eXBlICE9PSAnY2hpbGRMaXN0JylcclxuXHRcdFx0Y29udGludWU7XHJcblxyXG5cdFx0Ly8gQ2hlY2sgYWRkZWQgbm9kZXMuXHJcblx0XHRmb3IgKHZhciBqID0gMCwgbnVtTm9kZXMgPSBtdXRhdGlvbi5hZGRlZE5vZGVzLmxlbmd0aDsgaiA8IG51bU5vZGVzOyBqKyspXHJcblx0XHRcdC8vQ2hlY2sgbm9kZSByZWN1cnNpdmVseVxyXG5cdFx0XHRjaGVja05ld05vZGUobXV0YXRpb24uYWRkZWROb2Rlc1tqXSk7XHJcblxyXG5cdFx0Ly8gQ2hlY2sgcmVtb3ZlZCBub2Rlcy5cclxuXHRcdGZvciAoaiA9IDAsIG51bU5vZGVzID0gbXV0YXRpb24ucmVtb3ZlZE5vZGVzLmxlbmd0aDsgaiA8IG51bU5vZGVzOyBqKyspIFxyXG5cdFx0XHQvL0NoZWNrIG5vZGUgcmVjdXJzaXZlbHlcclxuXHRcdFx0Y2hlY2tSZW1vdmVkTm9kZShtdXRhdGlvbi5yZW1vdmVkTm9kZXNbal0pO1xyXG5cdH1cclxufSk7XHJcblxyXG4vL0dldCBhbGwgdmlkZW8gZWxlbWVudHMgYWxyZWFkeSBwcmVzZW50XHJcbnZhciB2aWRlb3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInZpZGVvXCIpO1xyXG5cclxuLy9IYW5kbGUgdGhlbVxyXG5mb3IgKHZhciBpPTA7IGk8dmlkZW9zLmxlbmd0aDsgKytpKVxyXG5cdFZpZGVvUmVuZGVyZXIuaGFuZGxlKHZpZGVvc1tpXSk7Il19
},{"./lib/MediaDevices.js":2,"./lib/MediaStream.js":3,"./lib/MediaStreamTrack.js":4,"./lib/RTCPeerConnection.js":6,"./lib/VideoRenderer.js":7}],2:[function(require,module,exports){
"use strict";

var WebRTCProxy = require("./WebRTCProxy.js");
var MediaStream = require("./MediaStream.js");
var Promise = require("promise-polyfill");
var EventTarget = require("event-target-shim/dist/event-target-shim.umd.js").EventTarget;
var defineEventAttribute = require("event-target-shim/dist/event-target-shim.umd.js").defineEventAttribute;

/*
	interface MediaDevices : EventTarget {
		attribute EventHandler ondevicechange;
		Promise<sequence<MediaDeviceInfo>> enumerateDevices();
	}

	partial interface MediaDevices {
		MediaTrackSupportedConstraints getSupportedConstraints();
		Promise<MediaStream>           getUserMedia(optional MediaStreamConstraints constraints);
	}
*/
var MediaDevices = function MediaDevices() {
	//Init event targetr
	EventTarget.call(this);
};

//Inherit from Event Target
MediaDevices.prototype = Object.create(EventTarget.prototype, {
	constructor: {
		value: MediaDevices,
		configurable: true,
		writable: true
	}
});

// Define Event Handlers
defineEventAttribute(MediaDevices.prototype, "devicechange");

MediaDevices.prototype.enumerateDevices = function () {
	throw "Not supported yet";

	return new Promise(function (resolve, reject) {
		resolve([]);
	});
};

MediaDevices.prototype.getSupportedConstraints = function () {
	throw "Not supported yet";
};

MediaDevices.prototype.getUserMedia = function (constraints) {
	return new Promise(function (resolve, reject) {
		var stream = new MediaStream();
		//If we are being requested audio
		if (constraints.audio) {
			var options = {};
			//Get new track
			var track = WebRTCProxy.createLocalAudioTrack(options);
			//Add it to the stream
			stream.addTrack(new MediaStreamTrack(track));
		}
		//If we are being requested video
		if (constraints.video) {
			var options = {};
			//Get new track
			var track = WebRTCProxy.createLocalVideoTrack(options);
			//Add it to the stream
			stream.addTrack(new MediaStreamTrack(track));
		}
		//Done
		resolve(stream);
	});
};

module.exports = MediaDevices;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1lZGlhRGV2aWNlcy5qcyJdLCJuYW1lcyI6WyJXZWJSVENQcm94eSIsInJlcXVpcmUiLCJNZWRpYVN0cmVhbSIsIlByb21pc2UiLCJFdmVudFRhcmdldCIsImRlZmluZUV2ZW50QXR0cmlidXRlIiwiTWVkaWFEZXZpY2VzIiwiY2FsbCIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImVudW1lcmF0ZURldmljZXMiLCJyZXNvbHZlIiwicmVqZWN0IiwiZ2V0U3VwcG9ydGVkQ29uc3RyYWludHMiLCJnZXRVc2VyTWVkaWEiLCJjb25zdHJhaW50cyIsInN0cmVhbSIsImF1ZGlvIiwib3B0aW9ucyIsInRyYWNrIiwiY3JlYXRlTG9jYWxBdWRpb1RyYWNrIiwiYWRkVHJhY2siLCJNZWRpYVN0cmVhbVRyYWNrIiwidmlkZW8iLCJjcmVhdGVMb2NhbFZpZGVvVHJhY2siLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLGNBQWdCQyxRQUFRLGtCQUFSLENBQXBCO0FBQ0EsSUFBSUMsY0FBZ0JELFFBQVEsa0JBQVIsQ0FBcEI7QUFDQSxJQUFJRSxVQUFZRixRQUFRLGtCQUFSLENBQWhCO0FBQ0EsSUFBSUcsY0FBZ0JILFFBQVEsaURBQVIsRUFBMkRHLFdBQS9FO0FBQ0EsSUFBSUMsdUJBQXVCSixRQUFRLGlEQUFSLEVBQTJESSxvQkFBdEY7O0FBRUE7Ozs7Ozs7Ozs7O0FBV0EsSUFBSUMsZUFBZSxTQUFmQSxZQUFlLEdBQ25CO0FBQ0M7QUFDQUYsYUFBWUcsSUFBWixDQUFpQixJQUFqQjtBQUVBLENBTEQ7O0FBT0E7QUFDQUQsYUFBYUUsU0FBYixHQUF5QkMsT0FBT0MsTUFBUCxDQUFjTixZQUFZSSxTQUExQixFQUFxQztBQUM3REcsY0FBYTtBQUNaQyxTQUFTTixZQURHO0FBRVpPLGdCQUFlLElBRkg7QUFHWkMsWUFBVztBQUhDO0FBRGdELENBQXJDLENBQXpCOztBQVFBO0FBQ0FULHFCQUFxQkMsYUFBYUUsU0FBbEMsRUFBNkMsY0FBN0M7O0FBRUFGLGFBQWFFLFNBQWIsQ0FBdUJPLGdCQUF2QixHQUEwQyxZQUMxQztBQUNDLE9BQU0sbUJBQU47O0FBRUEsUUFBTyxJQUFJWixPQUFKLENBQVksVUFBU2EsT0FBVCxFQUFpQkMsTUFBakIsRUFBd0I7QUFDMUNELFVBQVEsRUFBUjtBQUNBLEVBRk0sQ0FBUDtBQUdBLENBUEQ7O0FBU0FWLGFBQWFFLFNBQWIsQ0FBdUJVLHVCQUF2QixHQUFpRCxZQUNqRDtBQUNDLE9BQU0sbUJBQU47QUFDQSxDQUhEOztBQUtBWixhQUFhRSxTQUFiLENBQXVCVyxZQUF2QixHQUFzQyxVQUFTQyxXQUFULEVBQ3RDO0FBQ0MsUUFBTyxJQUFJakIsT0FBSixDQUFZLFVBQVNhLE9BQVQsRUFBaUJDLE1BQWpCLEVBQXdCO0FBQzFDLE1BQUlJLFNBQVMsSUFBSW5CLFdBQUosRUFBYjtBQUNBO0FBQ0EsTUFBSWtCLFlBQVlFLEtBQWhCLEVBQ0E7QUFDQyxPQUFJQyxVQUFVLEVBQWQ7QUFDQTtBQUNBLE9BQUlDLFFBQVF4QixZQUFZeUIscUJBQVosQ0FBa0NGLE9BQWxDLENBQVo7QUFDQTtBQUNBRixVQUFPSyxRQUFQLENBQWdCLElBQUlDLGdCQUFKLENBQXFCSCxLQUFyQixDQUFoQjtBQUNBO0FBQ0Q7QUFDQSxNQUFJSixZQUFZUSxLQUFoQixFQUNBO0FBQ0MsT0FBSUwsVUFBVSxFQUFkO0FBQ0E7QUFDQSxPQUFJQyxRQUFReEIsWUFBWTZCLHFCQUFaLENBQWtDTixPQUFsQyxDQUFaO0FBQ0E7QUFDQUYsVUFBT0ssUUFBUCxDQUFnQixJQUFJQyxnQkFBSixDQUFxQkgsS0FBckIsQ0FBaEI7QUFDQTtBQUNEO0FBQ0FSLFVBQVFLLE1BQVI7QUFDQSxFQXRCTSxDQUFQO0FBdUJBLENBekJEOztBQTJCQVMsT0FBT0MsT0FBUCxHQUFpQnpCLFlBQWpCIiwiZmlsZSI6Ik1lZGlhRGV2aWNlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBXZWJSVENQcm94eVx0XHRcdD0gcmVxdWlyZShcIi4vV2ViUlRDUHJveHkuanNcIik7XG52YXIgTWVkaWFTdHJlYW1cdFx0XHQ9IHJlcXVpcmUoXCIuL01lZGlhU3RyZWFtLmpzXCIpO1xudmFyIFByb21pc2VcdFx0XHQ9IHJlcXVpcmUoXCJwcm9taXNlLXBvbHlmaWxsXCIpO1xudmFyIEV2ZW50VGFyZ2V0XHRcdFx0PSByZXF1aXJlKFwiZXZlbnQtdGFyZ2V0LXNoaW0vZGlzdC9ldmVudC10YXJnZXQtc2hpbS51bWQuanNcIikuRXZlbnRUYXJnZXQ7XG52YXIgZGVmaW5lRXZlbnRBdHRyaWJ1dGVcdD0gcmVxdWlyZShcImV2ZW50LXRhcmdldC1zaGltL2Rpc3QvZXZlbnQtdGFyZ2V0LXNoaW0udW1kLmpzXCIpLmRlZmluZUV2ZW50QXR0cmlidXRlO1xuXG4vKlxuXHRpbnRlcmZhY2UgTWVkaWFEZXZpY2VzIDogRXZlbnRUYXJnZXQge1xuXHRcdGF0dHJpYnV0ZSBFdmVudEhhbmRsZXIgb25kZXZpY2VjaGFuZ2U7XG5cdFx0UHJvbWlzZTxzZXF1ZW5jZTxNZWRpYURldmljZUluZm8+PiBlbnVtZXJhdGVEZXZpY2VzKCk7XG5cdH1cblxuXHRwYXJ0aWFsIGludGVyZmFjZSBNZWRpYURldmljZXMge1xuXHRcdE1lZGlhVHJhY2tTdXBwb3J0ZWRDb25zdHJhaW50cyBnZXRTdXBwb3J0ZWRDb25zdHJhaW50cygpO1xuXHRcdFByb21pc2U8TWVkaWFTdHJlYW0+ICAgICAgICAgICBnZXRVc2VyTWVkaWEob3B0aW9uYWwgTWVkaWFTdHJlYW1Db25zdHJhaW50cyBjb25zdHJhaW50cyk7XG5cdH1cbiovXG52YXIgTWVkaWFEZXZpY2VzID0gZnVuY3Rpb24oKVxue1xuXHQvL0luaXQgZXZlbnQgdGFyZ2V0clxuXHRFdmVudFRhcmdldC5jYWxsKHRoaXMpO1xuXG59O1xuXG4vL0luaGVyaXQgZnJvbSBFdmVudCBUYXJnZXRcbk1lZGlhRGV2aWNlcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEV2ZW50VGFyZ2V0LnByb3RvdHlwZSwge1xuXHRjb25zdHJ1Y3RvcjogeyBcblx0XHR2YWx1ZVx0XHQ6IE1lZGlhRGV2aWNlcywgXG5cdFx0Y29uZmlndXJhYmxlXHQ6IHRydWUsXG5cdFx0d3JpdGFibGVcdDogdHJ1ZSBcblx0fVxufSk7XG5cbi8vIERlZmluZSBFdmVudCBIYW5kbGVyc1xuZGVmaW5lRXZlbnRBdHRyaWJ1dGUoTWVkaWFEZXZpY2VzLnByb3RvdHlwZSwgXCJkZXZpY2VjaGFuZ2VcIik7XG5cbk1lZGlhRGV2aWNlcy5wcm90b3R5cGUuZW51bWVyYXRlRGV2aWNlcyA9IGZ1bmN0aW9uKClcbntcblx0dGhyb3cgXCJOb3Qgc3VwcG9ydGVkIHlldFwiO1xuXHRcblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXtcblx0XHRyZXNvbHZlKFtdKTtcblx0fSk7XG59O1xuXG5NZWRpYURldmljZXMucHJvdG90eXBlLmdldFN1cHBvcnRlZENvbnN0cmFpbnRzID0gZnVuY3Rpb24oKVxue1xuXHR0aHJvdyBcIk5vdCBzdXBwb3J0ZWQgeWV0XCI7XG59O1xuXG5NZWRpYURldmljZXMucHJvdG90eXBlLmdldFVzZXJNZWRpYSA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzKVxue1xuXHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe1xuXHRcdHZhciBzdHJlYW0gPSBuZXcgTWVkaWFTdHJlYW0oKTtcblx0XHQvL0lmIHdlIGFyZSBiZWluZyByZXF1ZXN0ZWQgYXVkaW9cblx0XHRpZiAoY29uc3RyYWludHMuYXVkaW8pXG5cdFx0e1xuXHRcdFx0dmFyIG9wdGlvbnMgPSB7fTtcblx0XHRcdC8vR2V0IG5ldyB0cmFja1xuXHRcdFx0dmFyIHRyYWNrID0gV2ViUlRDUHJveHkuY3JlYXRlTG9jYWxBdWRpb1RyYWNrKG9wdGlvbnMpO1xuXHRcdFx0Ly9BZGQgaXQgdG8gdGhlIHN0cmVhbVxuXHRcdFx0c3RyZWFtLmFkZFRyYWNrKG5ldyBNZWRpYVN0cmVhbVRyYWNrKHRyYWNrKSk7XG5cdFx0fVxuXHRcdC8vSWYgd2UgYXJlIGJlaW5nIHJlcXVlc3RlZCB2aWRlb1xuXHRcdGlmIChjb25zdHJhaW50cy52aWRlbylcblx0XHR7XG5cdFx0XHR2YXIgb3B0aW9ucyA9IHt9O1xuXHRcdFx0Ly9HZXQgbmV3IHRyYWNrXG5cdFx0XHR2YXIgdHJhY2sgPSBXZWJSVENQcm94eS5jcmVhdGVMb2NhbFZpZGVvVHJhY2sob3B0aW9ucyk7XG5cdFx0XHQvL0FkZCBpdCB0byB0aGUgc3RyZWFtXG5cdFx0XHRzdHJlYW0uYWRkVHJhY2sobmV3IE1lZGlhU3RyZWFtVHJhY2sodHJhY2spKTtcblx0XHR9XG5cdFx0Ly9Eb25lXG5cdFx0cmVzb2x2ZShzdHJlYW0pO1xuXHR9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWVkaWFEZXZpY2VzOyJdfQ==
},{"./MediaStream.js":3,"./WebRTCProxy.js":8,"event-target-shim/dist/event-target-shim.umd.js":9,"promise-polyfill":10}],3:[function(require,module,exports){
"use strict";

var EventTarget = require("event-target-shim/dist/event-target-shim.umd.js").EventTarget;
var defineEventAttribute = require("event-target-shim/dist/event-target-shim.umd.js").defineEventAttribute;
/*
[Exposed=Window,
 Constructor,
 Constructor(MediaStream stream),
 Constructor(sequence<MediaStreamTrack> tracks)]
interface MediaStream : EventTarget {
    readonly attribute DOMString    id;
    sequence<MediaStreamTrack> getAudioTracks();
    sequence<MediaStreamTrack> getVideoTracks();
    sequence<MediaStreamTrack> getTracks();
    MediaStreamTrack?          getTrackById(DOMString trackId);
    void                       addTrack(MediaStreamTrack track);
    void                       removeTrack(MediaStreamTrack track);
    MediaStream                clone();
    readonly attribute boolean      active;
             attribute EventHandler onaddtrack;
             attribute EventHandler onremovetrack;
}; 
 */
var count = 0;

var MediaStream = function MediaStream(label, tracks) {
	//Init event targetr
	EventTarget.call(this);

	//Private vars
	this.priv = {
		tracks: {}
	};

	//Add input tracks to our map
	if (tracks) for (var i = 0; i < tracks.length; ++i) {
		this.priv.tracks[tracks[i].id] = tracks[i];
	}var id = label || "stream-" + count++;

	Object.defineProperty(this, 'id', { enumerable: true, configurable: false, writable: false, value: id });
	Object.defineProperty(this, 'active', { enumerable: true, configurable: false, writable: false, value: true });

	return this;
};

//Inherit from Event Target
MediaStream.prototype = Object.create(EventTarget.prototype, {
	constructor: {
		value: MediaStream,
		configurable: true,
		writable: true
	}
});

// Define Event Handlers
defineEventAttribute(MediaStream.prototype, "addtrack");
defineEventAttribute(MediaStream.prototype, "removetrack");

MediaStream.prototype.getAudioTracks = function () {
	var arr = [];
	for (var id in this.priv.tracks) {
		if (this.priv.tracks[id].kind === "audio") arr.push(this.priv.tracks[id]);
	}return arr;
};

MediaStream.prototype.getVideoTracks = function () {
	var arr = [];
	for (var id in this.priv.tracks) {
		if (this.priv.tracks[id].kind === "video") arr.push(this.priv.tracks[id]);
	}return arr;
};

MediaStream.prototype.getTracks = function () {
	var arr = [];
	for (var id in this.priv.tracks) {
		arr.push(this.priv.tracks[id]);
	}return arr;
};

MediaStream.prototype.getTrackById = function (id) {
	return this.priv.tracks[id];
};

MediaStream.prototype.addTrack = function (track) {
	//Check if already present
	if (this.priv.tracks.hasOwnProperty(track.id)) return;
	//Add to track
	this.priv.tracks[track.id] = track;
	//Create event
	var event = document.createEvent("Event");
	event.initEvent("addtrack", false, false);
	event.track = track;
	//Fire it
	this.dispatchEvent(event);
};

MediaStream.prototype.removeTrack = function (track) {
	//Check if it is notalready present
	if (!this.priv.tracks.hasOwnProperty(track.id)) return;
	//Add to track
	delete this.priv.tracks[track.id];
	//Create event
	var event = document.createEvent("Event");
	event.initEvent("removetrack", false, false);
	event.track = track;
	//Fire it
	this.dispatchEvent(event);
};

MediaStream.prototype.clone = function () {
	return new MediaStream(this.getTracks());
};

module.exports = MediaStream;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"event-target-shim/dist/event-target-shim.umd.js":9}],4:[function(require,module,exports){
"use strict";

var EventTarget = require("event-target-shim/dist/event-target-shim.umd.js").EventTarget;
var defineEventAttribute = require("event-target-shim/dist/event-target-shim.umd.js").defineEventAttribute;
/*
[Exposed=Window]
interface MediaStreamTrack : EventTarget {
    readonly attribute DOMString             kind;
    readonly attribute DOMString             id;
    readonly attribute DOMString             label;
             attribute boolean               enabled;
    readonly attribute boolean               muted;
             attribute EventHandler          onmute;
             attribute EventHandler          onunmute;
    readonly attribute MediaStreamTrackState readyState;
             attribute EventHandler          onended;
    MediaStreamTrack       clone();
    void                   stop();
    MediaTrackCapabilities getCapabilities();
    MediaTrackConstraints  getConstraints();
    MediaTrackSettings     getSettings();
    Promise<void>          applyConstraints(optional MediaTrackConstraints constraints);
             attribute EventHandler          onoverconstrained;
};
*/
var MediaStreamTrack = function MediaStreamTrack(track) {
	//Init event targetr
	EventTarget.call(this);

	//Private vars
	var priv = this.priv = {
		track: track,
		muted: false
	};

	Object.defineProperty(this, 'kind', { enumerable: true, configurable: false, get: function get() {
			return priv.track.kind;
		} });
	Object.defineProperty(this, 'id', { enumerable: true, configurable: false, get: function get() {
			return priv.track.id;
		} });
	Object.defineProperty(this, 'label', { enumerable: true, configurable: false, get: function get() {
			return priv.track.id;
		} });
	Object.defineProperty(this, 'enabled', { enumerable: true, configurable: false, get: function get() {
			return priv.track.enabled;
		}, set: function set(enabled) {
			priv.track.enabled = !!enabled;
		} });
	Object.defineProperty(this, 'muted', { enumerable: true, configurable: false, get: function get() {
			return priv.muted;
		} });
	Object.defineProperty(this, 'readyState', { enumerable: true, configurable: false, get: function get() {
			return priv.track.state;
		} });

	return this;
};

//Inherit from Event Target
MediaStreamTrack.prototype = Object.create(EventTarget.prototype, {
	constructor: {
		value: MediaStreamTrack,
		configurable: true,
		writable: true
	}
});

// Define Event Handlers
//TODO: fire them somehow
defineEventAttribute(MediaStreamTrack.prototype, "mute");
defineEventAttribute(MediaStreamTrack.prototype, "unmute");
defineEventAttribute(MediaStreamTrack.prototype, "ended");

MediaStreamTrack.prototype.clone = function () {
	return null;
};

MediaStreamTrack.prototype.stop = function () {
	this.priv.track.stop();
};

MediaStreamTrack.prototype.getCapabilities = function () {};

MediaStreamTrack.prototype.getConstraints = function () {};

MediaStreamTrack.prototype.getSettings = function () {};

MediaStreamTrack.prototype.applyConstraints = function () {};

module.exports = MediaStreamTrack;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1lZGlhU3RyZWFtVHJhY2suanMiXSwibmFtZXMiOlsiRXZlbnRUYXJnZXQiLCJyZXF1aXJlIiwiZGVmaW5lRXZlbnRBdHRyaWJ1dGUiLCJNZWRpYVN0cmVhbVRyYWNrIiwidHJhY2siLCJjYWxsIiwicHJpdiIsIm11dGVkIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiZ2V0Iiwia2luZCIsImlkIiwiZW5hYmxlZCIsInNldCIsInN0YXRlIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsIndyaXRhYmxlIiwiY2xvbmUiLCJzdG9wIiwiZ2V0Q2FwYWJpbGl0aWVzIiwiZ2V0Q29uc3RyYWludHMiLCJnZXRTZXR0aW5ncyIsImFwcGx5Q29uc3RyYWludHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLGNBQWdCQyxRQUFRLGlEQUFSLEVBQTJERCxXQUEvRTtBQUNBLElBQUlFLHVCQUF1QkQsUUFBUSxpREFBUixFQUEyREMsb0JBQXRGO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFCQSxJQUFJQyxtQkFBbUIsU0FBbkJBLGdCQUFtQixDQUFTQyxLQUFULEVBQ3ZCO0FBQ0M7QUFDQUosYUFBWUssSUFBWixDQUFpQixJQUFqQjs7QUFFQTtBQUNBLEtBQUlDLE9BQU8sS0FBS0EsSUFBTCxHQUFZO0FBQ3RCRixTQUFRQSxLQURjO0FBRXRCRyxTQUFRO0FBRmMsRUFBdkI7O0FBS0FDLFFBQU9DLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsTUFBNUIsRUFBcUMsRUFBRUMsWUFBWSxJQUFkLEVBQW9CQyxjQUFjLEtBQWxDLEVBQXlDQyxLQUFLLGVBQVU7QUFBRSxVQUFPTixLQUFLRixLQUFMLENBQVdTLElBQWxCO0FBQXlCLEdBQW5GLEVBQXJDO0FBQ0FMLFFBQU9DLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsSUFBNUIsRUFBbUMsRUFBRUMsWUFBWSxJQUFkLEVBQW9CQyxjQUFjLEtBQWxDLEVBQXlDQyxLQUFLLGVBQVU7QUFBRSxVQUFPTixLQUFLRixLQUFMLENBQVdVLEVBQWxCO0FBQXVCLEdBQWpGLEVBQW5DO0FBQ0FOLFFBQU9DLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsT0FBNUIsRUFBc0MsRUFBRUMsWUFBWSxJQUFkLEVBQW9CQyxjQUFjLEtBQWxDLEVBQXlDQyxLQUFLLGVBQVU7QUFBRSxVQUFPTixLQUFLRixLQUFMLENBQVdVLEVBQWxCO0FBQXVCLEdBQWpGLEVBQXRDO0FBQ0FOLFFBQU9DLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsU0FBNUIsRUFBd0MsRUFBRUMsWUFBWSxJQUFkLEVBQW9CQyxjQUFjLEtBQWxDLEVBQXlDQyxLQUFLLGVBQVU7QUFBRSxVQUFPTixLQUFLRixLQUFMLENBQVdXLE9BQWxCO0FBQTJCLEdBQXJGLEVBQXdGQyxLQUFLLGFBQVNELE9BQVQsRUFBaUI7QUFBRVQsUUFBS0YsS0FBTCxDQUFXVyxPQUFYLEdBQXFCLENBQUMsQ0FBQ0EsT0FBdkI7QUFBaUMsR0FBakosRUFBeEM7QUFDQVAsUUFBT0MsY0FBUCxDQUFzQixJQUF0QixFQUE0QixPQUE1QixFQUFzQyxFQUFFQyxZQUFZLElBQWQsRUFBb0JDLGNBQWMsS0FBbEMsRUFBeUNDLEtBQUssZUFBVTtBQUFFLFVBQU9OLEtBQUtDLEtBQVo7QUFBb0IsR0FBOUUsRUFBdEM7QUFDQUMsUUFBT0MsY0FBUCxDQUFzQixJQUF0QixFQUE0QixZQUE1QixFQUEwQyxFQUFFQyxZQUFZLElBQWQsRUFBb0JDLGNBQWMsS0FBbEMsRUFBeUNDLEtBQUssZUFBVTtBQUFFLFVBQU9OLEtBQUtGLEtBQUwsQ0FBV2EsS0FBbEI7QUFBMEIsR0FBcEYsRUFBMUM7O0FBRUEsUUFBTyxJQUFQO0FBQ0EsQ0FuQkQ7O0FBcUJBO0FBQ0FkLGlCQUFpQmUsU0FBakIsR0FBNkJWLE9BQU9XLE1BQVAsQ0FBY25CLFlBQVlrQixTQUExQixFQUFxQztBQUNqRUUsY0FBYTtBQUNaQyxTQUFTbEIsZ0JBREc7QUFFWlEsZ0JBQWUsSUFGSDtBQUdaVyxZQUFXO0FBSEM7QUFEb0QsQ0FBckMsQ0FBN0I7O0FBUUE7QUFDQTtBQUNBcEIscUJBQXFCQyxpQkFBaUJlLFNBQXRDLEVBQWlELE1BQWpEO0FBQ0FoQixxQkFBcUJDLGlCQUFpQmUsU0FBdEMsRUFBaUQsUUFBakQ7QUFDQWhCLHFCQUFxQkMsaUJBQWlCZSxTQUF0QyxFQUFpRCxPQUFqRDs7QUFFQWYsaUJBQWlCZSxTQUFqQixDQUEyQkssS0FBM0IsR0FBbUMsWUFDbkM7QUFDQyxRQUFPLElBQVA7QUFDQSxDQUhEOztBQUtBcEIsaUJBQWlCZSxTQUFqQixDQUEyQk0sSUFBM0IsR0FBa0MsWUFDbEM7QUFDQyxNQUFLbEIsSUFBTCxDQUFVRixLQUFWLENBQWdCb0IsSUFBaEI7QUFDQSxDQUhEOztBQUtBckIsaUJBQWlCZSxTQUFqQixDQUEyQk8sZUFBM0IsR0FBNkMsWUFDN0MsQ0FFQyxDQUhEOztBQUtBdEIsaUJBQWlCZSxTQUFqQixDQUEyQlEsY0FBM0IsR0FBNEMsWUFDNUMsQ0FFQyxDQUhEOztBQUtBdkIsaUJBQWlCZSxTQUFqQixDQUEyQlMsV0FBM0IsR0FBeUMsWUFDekMsQ0FFQyxDQUhEOztBQUtBeEIsaUJBQWlCZSxTQUFqQixDQUEyQlUsZ0JBQTNCLEdBQThDLFlBQzlDLENBRUMsQ0FIRDs7QUFLQUMsT0FBT0MsT0FBUCxHQUFpQjNCLGdCQUFqQiIsImZpbGUiOiJNZWRpYVN0cmVhbVRyYWNrLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIEV2ZW50VGFyZ2V0XHRcdFx0PSByZXF1aXJlKFwiZXZlbnQtdGFyZ2V0LXNoaW0vZGlzdC9ldmVudC10YXJnZXQtc2hpbS51bWQuanNcIikuRXZlbnRUYXJnZXQ7XG52YXIgZGVmaW5lRXZlbnRBdHRyaWJ1dGVcdD0gcmVxdWlyZShcImV2ZW50LXRhcmdldC1zaGltL2Rpc3QvZXZlbnQtdGFyZ2V0LXNoaW0udW1kLmpzXCIpLmRlZmluZUV2ZW50QXR0cmlidXRlO1xuLypcbltFeHBvc2VkPVdpbmRvd11cbmludGVyZmFjZSBNZWRpYVN0cmVhbVRyYWNrIDogRXZlbnRUYXJnZXQge1xuICAgIHJlYWRvbmx5IGF0dHJpYnV0ZSBET01TdHJpbmcgICAgICAgICAgICAga2luZDtcbiAgICByZWFkb25seSBhdHRyaWJ1dGUgRE9NU3RyaW5nICAgICAgICAgICAgIGlkO1xuICAgIHJlYWRvbmx5IGF0dHJpYnV0ZSBET01TdHJpbmcgICAgICAgICAgICAgbGFiZWw7XG4gICAgICAgICAgICAgYXR0cmlidXRlIGJvb2xlYW4gICAgICAgICAgICAgICBlbmFibGVkO1xuICAgIHJlYWRvbmx5IGF0dHJpYnV0ZSBib29sZWFuICAgICAgICAgICAgICAgbXV0ZWQ7XG4gICAgICAgICAgICAgYXR0cmlidXRlIEV2ZW50SGFuZGxlciAgICAgICAgICBvbm11dGU7XG4gICAgICAgICAgICAgYXR0cmlidXRlIEV2ZW50SGFuZGxlciAgICAgICAgICBvbnVubXV0ZTtcbiAgICByZWFkb25seSBhdHRyaWJ1dGUgTWVkaWFTdHJlYW1UcmFja1N0YXRlIHJlYWR5U3RhdGU7XG4gICAgICAgICAgICAgYXR0cmlidXRlIEV2ZW50SGFuZGxlciAgICAgICAgICBvbmVuZGVkO1xuICAgIE1lZGlhU3RyZWFtVHJhY2sgICAgICAgY2xvbmUoKTtcbiAgICB2b2lkICAgICAgICAgICAgICAgICAgIHN0b3AoKTtcbiAgICBNZWRpYVRyYWNrQ2FwYWJpbGl0aWVzIGdldENhcGFiaWxpdGllcygpO1xuICAgIE1lZGlhVHJhY2tDb25zdHJhaW50cyAgZ2V0Q29uc3RyYWludHMoKTtcbiAgICBNZWRpYVRyYWNrU2V0dGluZ3MgICAgIGdldFNldHRpbmdzKCk7XG4gICAgUHJvbWlzZTx2b2lkPiAgICAgICAgICBhcHBseUNvbnN0cmFpbnRzKG9wdGlvbmFsIE1lZGlhVHJhY2tDb25zdHJhaW50cyBjb25zdHJhaW50cyk7XG4gICAgICAgICAgICAgYXR0cmlidXRlIEV2ZW50SGFuZGxlciAgICAgICAgICBvbm92ZXJjb25zdHJhaW5lZDtcbn07XG4qL1xudmFyIE1lZGlhU3RyZWFtVHJhY2sgPSBmdW5jdGlvbih0cmFjaylcbntcblx0Ly9Jbml0IGV2ZW50IHRhcmdldHJcblx0RXZlbnRUYXJnZXQuY2FsbCh0aGlzKTtcblx0XG5cdC8vUHJpdmF0ZSB2YXJzXG5cdHZhciBwcml2ID0gdGhpcy5wcml2ID0ge1xuXHRcdHRyYWNrIDogdHJhY2ssXG5cdFx0bXV0ZWQgOiBmYWxzZVxuXHR9O1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdraW5kJ1x0LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogZmFsc2UsIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHByaXYudHJhY2sua2luZDtcdH19KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdpZCdcdCwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IGZhbHNlLCBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBwcml2LnRyYWNrLmlkO1x0fX0pO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2xhYmVsJ1x0LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogZmFsc2UsIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHByaXYudHJhY2suaWQ7XHR9fSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZW5hYmxlZCdcdCwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IGZhbHNlLCBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBwcml2LnRyYWNrLmVuYWJsZWQ7fSAsIHNldDogZnVuY3Rpb24oZW5hYmxlZCl7IHByaXYudHJhY2suZW5hYmxlZCA9ICEhZW5hYmxlZDsgfX0pO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ211dGVkJ1x0LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogZmFsc2UsIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHByaXYubXV0ZWQ7XHR9fSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncmVhZHlTdGF0ZScsIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiBmYWxzZSwgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gcHJpdi50cmFjay5zdGF0ZTtcdH19KTtcblx0XG5cdHJldHVybiB0aGlzO1xufTtcblxuLy9Jbmhlcml0IGZyb20gRXZlbnQgVGFyZ2V0XG5NZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXZlbnRUYXJnZXQucHJvdG90eXBlLCB7XG5cdGNvbnN0cnVjdG9yOiB7IFxuXHRcdHZhbHVlXHRcdDogTWVkaWFTdHJlYW1UcmFjaywgXG5cdFx0Y29uZmlndXJhYmxlXHQ6IHRydWUsXG5cdFx0d3JpdGFibGVcdDogdHJ1ZSBcblx0fVxufSk7XG5cbi8vIERlZmluZSBFdmVudCBIYW5kbGVyc1xuLy9UT0RPOiBmaXJlIHRoZW0gc29tZWhvd1xuZGVmaW5lRXZlbnRBdHRyaWJ1dGUoTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUsIFwibXV0ZVwiKTtcbmRlZmluZUV2ZW50QXR0cmlidXRlKE1lZGlhU3RyZWFtVHJhY2sucHJvdG90eXBlLCBcInVubXV0ZVwiKTtcbmRlZmluZUV2ZW50QXR0cmlidXRlKE1lZGlhU3RyZWFtVHJhY2sucHJvdG90eXBlLCBcImVuZGVkXCIpO1xuXG5NZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKClcbntcblx0cmV0dXJuIG51bGw7XG59O1xuXG5NZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKVxue1xuXHR0aGlzLnByaXYudHJhY2suc3RvcCgpO1xufTtcblxuTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUuZ2V0Q2FwYWJpbGl0aWVzID0gZnVuY3Rpb24oKVxue1xuXHRcbn07XG5cbk1lZGlhU3RyZWFtVHJhY2sucHJvdG90eXBlLmdldENvbnN0cmFpbnRzID0gZnVuY3Rpb24oKVxue1xuXHRcbn07XG5cbk1lZGlhU3RyZWFtVHJhY2sucHJvdG90eXBlLmdldFNldHRpbmdzID0gZnVuY3Rpb24oKVxue1xuXHRcbn07XG5cbk1lZGlhU3RyZWFtVHJhY2sucHJvdG90eXBlLmFwcGx5Q29uc3RyYWludHMgPSBmdW5jdGlvbigpXG57XG5cdFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNZWRpYVN0cmVhbVRyYWNrOyJdfQ==
},{"event-target-shim/dist/event-target-shim.umd.js":9}],5:[function(require,module,exports){
"use strict";

/*
interface RTCIceCandidate {
    readonly attribute DOMString               candidate;
    readonly attribute DOMString?              sdpMid;
    readonly attribute unsigned short?         sdpMLineIndex;
    readonly attribute DOMString?              foundation;
    readonly attribute RTCIceComponent?        component;
    readonly attribute unsigned long?          priority;
    readonly attribute DOMString?              ip;
    readonly attribute RTCIceProtocol?         protocol;
    readonly attribute unsigned short?         port;
    readonly attribute RTCIceCandidateType?    type;
    readonly attribute RTCIceTcpCandidateType? tcpType;
    readonly attribute DOMString?              relatedAddress;
    readonly attribute unsigned short?         relatedPort;
    readonly attribute DOMString?              usernameFragment;
    RTCIceCandidateInit toJSON();
};
 */
var RTCIceCandidate = function RTCIceCandidate(candidate, sdpMid, sdpMLineIndex, foundation, component, priority, ip, protocol, port, type, tcpType, relatedAddress, relatedPort, usernameFragment) {
	//Direct attributes from init
	Object.defineProperty(this, "candidate", { enumerable: true, configurable: false, get: function get() {
			return candidate;
		} });
	Object.defineProperty(this, "sdpMid", { enumerable: true, configurable: false, get: function get() {
			return sdpMid;
		} });
	Object.defineProperty(this, "sdpMLineIndex", { enumerable: true, configurable: false, get: function get() {
			return sdpMLineIndex;
		} });
	Object.defineProperty(this, "foundation", { enumerable: true, configurable: false, get: function get() {
			return foundation;
		} });
	Object.defineProperty(this, "component", { enumerable: true, configurable: false, get: function get() {
			return component;
		} });
	Object.defineProperty(this, "priority", { enumerable: true, configurable: false, get: function get() {
			return priority;
		} });
	Object.defineProperty(this, "ip", { enumerable: true, configurable: false, get: function get() {
			return ip;
		} });
	Object.defineProperty(this, "protocol", { enumerable: true, configurable: false, get: function get() {
			return protocol;
		} });
	Object.defineProperty(this, "port", { enumerable: true, configurable: false, get: function get() {
			return port;
		} });
	Object.defineProperty(this, "type", { enumerable: true, configurable: false, get: function get() {
			return type;
		} });
	Object.defineProperty(this, "tcpType", { enumerable: true, configurable: false, get: function get() {
			return tcpType;
		} });
	Object.defineProperty(this, "relatedAddress", { enumerable: true, configurable: false, get: function get() {
			return relatedAddress;
		} });
	Object.defineProperty(this, "relatedPort", { enumerable: true, configurable: false, get: function get() {
			return relatedPort;
		} });
	Object.defineProperty(this, "usernameFragment", { enumerable: true, configurable: false, get: function get() {
			return usernameFragment;
		} });

	return this;
};

RTCIceCandidate.prototype.toJSON = function () {
	return {
		candidate: this.candidate,
		sdpMid: this.sdpMid,
		sdpMLineIndex: this.sdpMLineIndex,
		usernameFragment: this.usernameFragment
	};
};

module.exports = RTCIceCandidate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJUQ0ljZUNhbmRpZGF0ZS5qcyJdLCJuYW1lcyI6WyJSVENJY2VDYW5kaWRhdGUiLCJjYW5kaWRhdGUiLCJzZHBNaWQiLCJzZHBNTGluZUluZGV4IiwiZm91bmRhdGlvbiIsImNvbXBvbmVudCIsInByaW9yaXR5IiwiaXAiLCJwcm90b2NvbCIsInBvcnQiLCJ0eXBlIiwidGNwVHlwZSIsInJlbGF0ZWRBZGRyZXNzIiwicmVsYXRlZFBvcnQiLCJ1c2VybmFtZUZyYWdtZW50IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiZ2V0IiwicHJvdG90eXBlIiwidG9KU09OIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxJQUFJQSxrQkFBa0IsU0FBbEJBLGVBQWtCLENBQVNDLFNBQVQsRUFBbUJDLE1BQW5CLEVBQTBCQyxhQUExQixFQUF3Q0MsVUFBeEMsRUFBbURDLFNBQW5ELEVBQTZEQyxRQUE3RCxFQUFzRUMsRUFBdEUsRUFBeUVDLFFBQXpFLEVBQWtGQyxJQUFsRixFQUF1RkMsSUFBdkYsRUFBNEZDLE9BQTVGLEVBQW9HQyxjQUFwRyxFQUFtSEMsV0FBbkgsRUFBK0hDLGdCQUEvSCxFQUN0QjtBQUNDO0FBQ0FDLFFBQU9DLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsV0FBNUIsRUFBMkMsRUFBRUMsWUFBWSxJQUFkLEVBQW9CQyxjQUFjLEtBQWxDLEVBQXlDQyxLQUFLLGVBQVc7QUFBRSxVQUFPbEIsU0FBUDtBQUFvQixHQUEvRSxFQUEzQztBQUNBYyxRQUFPQyxjQUFQLENBQXNCLElBQXRCLEVBQTRCLFFBQTVCLEVBQXdDLEVBQUVDLFlBQVksSUFBZCxFQUFvQkMsY0FBYyxLQUFsQyxFQUF5Q0MsS0FBSyxlQUFXO0FBQUUsVUFBT2pCLE1BQVA7QUFBaUIsR0FBNUUsRUFBeEM7QUFDQWEsUUFBT0MsY0FBUCxDQUFzQixJQUF0QixFQUE0QixlQUE1QixFQUE4QyxFQUFFQyxZQUFZLElBQWQsRUFBb0JDLGNBQWMsS0FBbEMsRUFBeUNDLEtBQUssZUFBVztBQUFFLFVBQU9oQixhQUFQO0FBQXVCLEdBQWxGLEVBQTlDO0FBQ0FZLFFBQU9DLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsWUFBNUIsRUFBMkMsRUFBRUMsWUFBWSxJQUFkLEVBQW9CQyxjQUFjLEtBQWxDLEVBQXlDQyxLQUFLLGVBQVc7QUFBRSxVQUFPZixVQUFQO0FBQXFCLEdBQWhGLEVBQTNDO0FBQ0FXLFFBQU9DLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsV0FBNUIsRUFBMkMsRUFBRUMsWUFBWSxJQUFkLEVBQW9CQyxjQUFjLEtBQWxDLEVBQXlDQyxLQUFLLGVBQVc7QUFBRSxVQUFPZCxTQUFQO0FBQW9CLEdBQS9FLEVBQTNDO0FBQ0FVLFFBQU9DLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsVUFBNUIsRUFBMEMsRUFBRUMsWUFBWSxJQUFkLEVBQW9CQyxjQUFjLEtBQWxDLEVBQXlDQyxLQUFLLGVBQVc7QUFBRSxVQUFPYixRQUFQO0FBQW1CLEdBQTlFLEVBQTFDO0FBQ0FTLFFBQU9DLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsSUFBNUIsRUFBb0MsRUFBRUMsWUFBWSxJQUFkLEVBQW9CQyxjQUFjLEtBQWxDLEVBQXlDQyxLQUFLLGVBQVc7QUFBRSxVQUFPWixFQUFQO0FBQWMsR0FBekUsRUFBcEM7QUFDQVEsUUFBT0MsY0FBUCxDQUFzQixJQUF0QixFQUE0QixVQUE1QixFQUEwQyxFQUFFQyxZQUFZLElBQWQsRUFBb0JDLGNBQWMsS0FBbEMsRUFBeUNDLEtBQUssZUFBVztBQUFFLFVBQU9YLFFBQVA7QUFBbUIsR0FBOUUsRUFBMUM7QUFDQU8sUUFBT0MsY0FBUCxDQUFzQixJQUF0QixFQUE0QixNQUE1QixFQUFzQyxFQUFFQyxZQUFZLElBQWQsRUFBb0JDLGNBQWMsS0FBbEMsRUFBeUNDLEtBQUssZUFBVztBQUFFLFVBQU9WLElBQVA7QUFBZSxHQUExRSxFQUF0QztBQUNBTSxRQUFPQyxjQUFQLENBQXNCLElBQXRCLEVBQTRCLE1BQTVCLEVBQXNDLEVBQUVDLFlBQVksSUFBZCxFQUFvQkMsY0FBYyxLQUFsQyxFQUF5Q0MsS0FBSyxlQUFXO0FBQUUsVUFBT1QsSUFBUDtBQUFlLEdBQTFFLEVBQXRDO0FBQ0FLLFFBQU9DLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsU0FBNUIsRUFBeUMsRUFBRUMsWUFBWSxJQUFkLEVBQW9CQyxjQUFjLEtBQWxDLEVBQXlDQyxLQUFLLGVBQVc7QUFBRSxVQUFPUixPQUFQO0FBQWtCLEdBQTdFLEVBQXpDO0FBQ0FJLFFBQU9DLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsZ0JBQTVCLEVBQStDLEVBQUVDLFlBQVksSUFBZCxFQUFvQkMsY0FBYyxLQUFsQyxFQUF5Q0MsS0FBSyxlQUFXO0FBQUUsVUFBT1AsY0FBUDtBQUF3QixHQUFuRixFQUEvQztBQUNBRyxRQUFPQyxjQUFQLENBQXNCLElBQXRCLEVBQTRCLGFBQTVCLEVBQTRDLEVBQUVDLFlBQVksSUFBZCxFQUFvQkMsY0FBYyxLQUFsQyxFQUF5Q0MsS0FBSyxlQUFXO0FBQUUsVUFBT04sV0FBUDtBQUFxQixHQUFoRixFQUE1QztBQUNBRSxRQUFPQyxjQUFQLENBQXNCLElBQXRCLEVBQTRCLGtCQUE1QixFQUFpRCxFQUFFQyxZQUFZLElBQWQsRUFBb0JDLGNBQWMsS0FBbEMsRUFBeUNDLEtBQUssZUFBVztBQUFFLFVBQU9MLGdCQUFQO0FBQTBCLEdBQXJGLEVBQWpEOztBQUVBLFFBQU8sSUFBUDtBQUNBLENBbkJEOztBQXFCQWQsZ0JBQWdCb0IsU0FBaEIsQ0FBMEJDLE1BQTFCLEdBQW1DLFlBQ25DO0FBQ0MsUUFBTztBQUNOcEIsYUFBWSxLQUFLQSxTQURYO0FBRU5DLFVBQVUsS0FBS0EsTUFGVDtBQUdOQyxpQkFBZ0IsS0FBS0EsYUFIZjtBQUlOVyxvQkFBa0IsS0FBS0E7QUFKakIsRUFBUDtBQU1BLENBUkQ7O0FBVUFRLE9BQU9DLE9BQVAsR0FBaUJ2QixlQUFqQiIsImZpbGUiOiJSVENJY2VDYW5kaWRhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuaW50ZXJmYWNlIFJUQ0ljZUNhbmRpZGF0ZSB7XG4gICAgcmVhZG9ubHkgYXR0cmlidXRlIERPTVN0cmluZyAgICAgICAgICAgICAgIGNhbmRpZGF0ZTtcbiAgICByZWFkb25seSBhdHRyaWJ1dGUgRE9NU3RyaW5nPyAgICAgICAgICAgICAgc2RwTWlkO1xuICAgIHJlYWRvbmx5IGF0dHJpYnV0ZSB1bnNpZ25lZCBzaG9ydD8gICAgICAgICBzZHBNTGluZUluZGV4O1xuICAgIHJlYWRvbmx5IGF0dHJpYnV0ZSBET01TdHJpbmc/ICAgICAgICAgICAgICBmb3VuZGF0aW9uO1xuICAgIHJlYWRvbmx5IGF0dHJpYnV0ZSBSVENJY2VDb21wb25lbnQ/ICAgICAgICBjb21wb25lbnQ7XG4gICAgcmVhZG9ubHkgYXR0cmlidXRlIHVuc2lnbmVkIGxvbmc/ICAgICAgICAgIHByaW9yaXR5O1xuICAgIHJlYWRvbmx5IGF0dHJpYnV0ZSBET01TdHJpbmc/ICAgICAgICAgICAgICBpcDtcbiAgICByZWFkb25seSBhdHRyaWJ1dGUgUlRDSWNlUHJvdG9jb2w/ICAgICAgICAgcHJvdG9jb2w7XG4gICAgcmVhZG9ubHkgYXR0cmlidXRlIHVuc2lnbmVkIHNob3J0PyAgICAgICAgIHBvcnQ7XG4gICAgcmVhZG9ubHkgYXR0cmlidXRlIFJUQ0ljZUNhbmRpZGF0ZVR5cGU/ICAgIHR5cGU7XG4gICAgcmVhZG9ubHkgYXR0cmlidXRlIFJUQ0ljZVRjcENhbmRpZGF0ZVR5cGU/IHRjcFR5cGU7XG4gICAgcmVhZG9ubHkgYXR0cmlidXRlIERPTVN0cmluZz8gICAgICAgICAgICAgIHJlbGF0ZWRBZGRyZXNzO1xuICAgIHJlYWRvbmx5IGF0dHJpYnV0ZSB1bnNpZ25lZCBzaG9ydD8gICAgICAgICByZWxhdGVkUG9ydDtcbiAgICByZWFkb25seSBhdHRyaWJ1dGUgRE9NU3RyaW5nPyAgICAgICAgICAgICAgdXNlcm5hbWVGcmFnbWVudDtcbiAgICBSVENJY2VDYW5kaWRhdGVJbml0IHRvSlNPTigpO1xufTtcbiAqL1xudmFyIFJUQ0ljZUNhbmRpZGF0ZSA9IGZ1bmN0aW9uKGNhbmRpZGF0ZSxzZHBNaWQsc2RwTUxpbmVJbmRleCxmb3VuZGF0aW9uLGNvbXBvbmVudCxwcmlvcml0eSxpcCxwcm90b2NvbCxwb3J0LHR5cGUsdGNwVHlwZSxyZWxhdGVkQWRkcmVzcyxyZWxhdGVkUG9ydCx1c2VybmFtZUZyYWdtZW50KSBcbntcblx0Ly9EaXJlY3QgYXR0cmlidXRlcyBmcm9tIGluaXRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY2FuZGlkYXRlXCJcdFx0LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogZmFsc2UsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBjYW5kaWRhdGU7XHRcdH19KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic2RwTWlkXCJcdFx0LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogZmFsc2UsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBzZHBNaWQ7XHRcdH19KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic2RwTUxpbmVJbmRleFwiXHQsIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiBmYWxzZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHNkcE1MaW5lSW5kZXg7XHR9fSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImZvdW5kYXRpb25cIlx0LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogZmFsc2UsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBmb3VuZGF0aW9uO1x0XHR9fSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvbXBvbmVudFwiXHRcdCwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IGZhbHNlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29tcG9uZW50O1x0XHR9fSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInByaW9yaXR5XCJcdFx0LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogZmFsc2UsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBwcmlvcml0eTtcdFx0fX0pO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpcFwiXHRcdCwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IGZhbHNlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gaXA7XHRcdFx0fX0pO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJwcm90b2NvbFwiXHRcdCwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IGZhbHNlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gcHJvdG9jb2w7XHRcdH19KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicG9ydFwiXHRcdCwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IGZhbHNlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gcG9ydDtcdFx0fX0pO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0eXBlXCJcdFx0LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogZmFsc2UsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiB0eXBlO1x0XHR9fSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRjcFR5cGVcIlx0XHQsIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiBmYWxzZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRjcFR5cGU7XHRcdH19KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmVsYXRlZEFkZHJlc3NcIlx0LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogZmFsc2UsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiByZWxhdGVkQWRkcmVzcztcdH19KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmVsYXRlZFBvcnRcIlx0LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogZmFsc2UsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiByZWxhdGVkUG9ydDtcdH19KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidXNlcm5hbWVGcmFnbWVudFwiXHQsIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiBmYWxzZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHVzZXJuYW1lRnJhZ21lbnQ7XHR9fSk7XG5cdFxuXHRyZXR1cm4gdGhpcztcbn07XG5cblJUQ0ljZUNhbmRpZGF0ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24oKSBcbntcblx0cmV0dXJuIHtcblx0XHRjYW5kaWRhdGVcdDogdGhpcy5jYW5kaWRhdGUsXG5cdFx0c2RwTWlkXHRcdDogdGhpcy5zZHBNaWQsXG5cdFx0c2RwTUxpbmVJbmRleFx0OiB0aGlzLnNkcE1MaW5lSW5kZXgsXG5cdFx0dXNlcm5hbWVGcmFnbWVudDogdGhpcy51c2VybmFtZUZyYWdtZW50XG5cdH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJUQ0ljZUNhbmRpZGF0ZTtcbiJdfQ==
},{}],6:[function(require,module,exports){
"use strict";

var WebRTCProxy = require("./WebRTCProxy.js");
var RTCIceCandidate = require("./RTCIceCandidate.js");
var Promise = require("promise-polyfill");
var EventTarget = require("event-target-shim/dist/event-target-shim.umd.js").EventTarget;
var defineEventAttribute = require("event-target-shim/dist/event-target-shim.umd.js").defineEventAttribute;

var ThrowInvalidStateError = function ThrowInvalidStateError() {
	var e = new Error("RTCPeerConnection is already closed");
	e.name = "InvalidStateError";
	throw e;
};

/*
[Constructor(optional RTCConfiguration configuration),Exposed=Window]
interface RTCPeerConnection : EventTarget {
    Promise<RTCSessionDescriptionInit> createOffer(optional RTCOfferOptions options);
    Promise<RTCSessionDescriptionInit> createAnswer(optional RTCAnswerOptions options);
    Promise<void>                      setLocalDescription(RTCSessionDescriptionInit description);

    readonly attribute RTCSessionDescription? localDescription;
    readonly attribute RTCSessionDescription? currentLocalDescription;
    readonly attribute RTCSessionDescription? pendingLocalDescription;

    Promise<void>                      setRemoteDescription(RTCSessionDescriptionInit description);

    readonly attribute RTCSessionDescription? remoteDescription;
    readonly attribute RTCSessionDescription? currentRemoteDescription;
    readonly attribute RTCSessionDescription? pendingRemoteDescription;

    Promise<void>                      addIceCandidate((RTCIceCandidateInit or RTCIceCandidate) candidate);

    readonly attribute RTCSignalingState      signalingState;
    readonly attribute RTCIceGatheringState   iceGatheringState;
    readonly attribute RTCIceConnectionState  iceConnectionState;
    readonly attribute RTCPeerConnectionState connectionState;
    readonly attribute boolean?               canTrickleIceCandidates;
    static sequence<RTCIceServer>      getDefaultIceServers();
    RTCConfiguration                   getConfiguration();
    void                               setConfiguration(RTCConfiguration configuration);
    void                               close();

	attribute EventHandler           onnegotiationneeded;
	attribute EventHandler           onicecandidate;
	attribute EventHandler           onicecandidateerror;
	attribute EventHandler           onsignalingstatechange;
	attribute EventHandler           oniceconnectionstatechange;
	attribute EventHandler           onicegatheringstatechange;
	attribute EventHandler           onconnectionstatechange;
};
*/
var RTCPeerConnection = function RTCPeerConnection(configuration) {
	var self = this;
	//Init event targetr
	EventTarget.call(this);

	//Create private arfs
	var priv = this.priv = {};

	priv.senders = {};
	priv.remoteStreams = {};
	priv.configuration = configuration;
	priv.lastOffer = null;
	priv.lastAnswer = null;
	priv.isClosed = false;

	//Emtpy attributes
	priv.currentLocalDescription = null;
	priv.pendingLocalDescription = null;

	priv.currentRemoteDescription = null;
	priv.pendingRemoteDescription = null;

	var signalingState = "stable";
	var iceGatheringState = "new";
	var iceConnectionState = "new";
	var connectionState = "new";

	//TODO: Implement this
	var canTrickleIceCandidates = null;

	//Define read only properties for each attribute
	//The localDescription attribute must return pendingLocalDescription if it is not null and otherwise it must return currentLocalDescription .
	Object.defineProperty(this, 'localDescription', { enumerable: true, configurable: false, get: function get() {
			return priv.pendingLocalDescription || priv.currentLocalDescription;
		} });
	Object.defineProperty(this, 'currentLocalDescription', { enumerable: true, configurable: false, get: function get() {
			return priv.currentLocalDescription;
		} });
	Object.defineProperty(this, 'pendingLocalDescription', { enumerable: true, configurable: false, get: function get() {
			return priv.pendingLocalDescription;
		} });

	Object.defineProperty(this, 'remoteDescription', { enumerable: true, configurable: false, get: function get() {
			return priv.currentRemoteDescription || priv.pendingRemoteDescription;
		} });
	Object.defineProperty(this, 'currentRemoteDescription', { enumerable: true, configurable: false, get: function get() {
			return priv.currentRemoteDescription;
		} });
	Object.defineProperty(this, 'pendingRemoteDescription', { enumerable: true, configurable: false, get: function get() {
			return priv.pendingRemoteDescription;
		} });

	Object.defineProperty(this, 'signalingState', { enumerable: true, configurable: false, get: function get() {
			return signalingState;
		} });
	Object.defineProperty(this, 'iceGatheringState', { enumerable: true, configurable: false, get: function get() {
			return iceGatheringState;
		} });
	Object.defineProperty(this, 'iceConnectionState', { enumerable: true, configurable: false, get: function get() {
			return iceConnectionState;
		} });
	Object.defineProperty(this, 'connectionState', { enumerable: true, configurable: false, get: function get() {
			return connectionState;
		} });

	Object.defineProperty(this, 'canTrickleIceCandidates', { enumerable: true, configurable: false, get: function get() {
			return canTrickleIceCandidates;
		} });

	function createEvent(name) {
		var e = document.createEvent("Event");
		e.initEvent(name, false, false);
		return e;
	}
	function fire(name) {
		self.dispatchEvent(createEvent(name));
	}

	// Create new native pc
	priv.pc = WebRTCProxy.createPeerConnection(configuration);

	//Event handlers
	priv.pc.onnegotiationneeded = function () {
		fire("negotiationneeded");
	};
	priv.pc.onicecandidate = function (candidate, sdpMid, sdpMLineIndex, foundation, component, priority, ip, protocol, port, type, tcpType, relatedAddress, relatedPort, usernameFragment, url) {
		var e = createEvent("icecandidate");
		if (candidate) e.candidate = new RTCIceCandidate(candidate, sdpMid, sdpMLineIndex, foundation, component, priority, ip, protocol, port, type, tcpType, relatedAddress, relatedPort, usernameFragment);else e.candidate = null;
		e.url = url;
		self.dispatchEvent(e);
	};
	priv.pc.onicecandidateerror = function () {
		fire("icecandidateerror");
	};
	priv.pc.onsignalingstatechange = function (state) {
		signalingState = state;
		fire("signalingstatechange");
		if ("closed" === state) {
			priv.isClosed = true;
			delete priv.pc;
		}
	};
	priv.pc.oniceconnectionstatechange = function (state) {
		iceConnectionState = state;
		fire("iceconnectionstatechange");
	};
	priv.pc.onicegatheringstatechange = function (state) {
		iceGatheringState = state;
		fire("icegatheringstatechange");
	};
	priv.pc.onconnectionstatechange = function (state) {
		connectionState = state;
		fire("connectionState");
	};
	priv.pc.onaddstream = function () {
		//Parse arguments
		var label = arguments[0];
		var tracks = Array.prototype.slice.call(arguments, 1);
		var mediaStreamTracks = [];

		//For each track
		for (var i = 0; i < tracks.length; ++i) {
			//Create a wrapper
			mediaStreamTracks.push(new MediaStreamTrack(tracks[i]));
		} //Create new stream
		var stream = new MediaStream(label, mediaStreamTracks);

		//For each track in stream
		for (var i = 0; i < mediaStreamTracks.length; ++i) {
			var e = createEvent("track");
			e.track = mediaStreamTracks[i];
			e.receiver = { track: mediaStreamTracks[i] };
			e.transceiver = { receiver: e.receiver };
			e.streams = [stream];
			self.dispatchEvent(e);
		}
	};

	priv.pc.onremovestream = function (label) {
		//Delete from remote stream list
		delete priv.remotes[label];
	};
};

//Inherit from Event Target
RTCPeerConnection.prototype = Object.create(EventTarget.prototype, {
	constructor: {
		value: RTCPeerConnection,
		configurable: true,
		writable: true
	}
});

// Define Event Handlers
defineEventAttribute(RTCPeerConnection.prototype, "negotiationneeded");
defineEventAttribute(RTCPeerConnection.prototype, "icecandidate");
defineEventAttribute(RTCPeerConnection.prototype, "icecandidateerror");
defineEventAttribute(RTCPeerConnection.prototype, "signalingstatechange");
defineEventAttribute(RTCPeerConnection.prototype, "iceconnectionstatechange");
defineEventAttribute(RTCPeerConnection.prototype, "icegatheringstatechange");
defineEventAttribute(RTCPeerConnection.prototype, "connectionstatechange");
defineEventAttribute(RTCPeerConnection.prototype, "addtrack");

RTCPeerConnection.prototype.getConfiguration = function () {
	return this.priv.configuration;
};

RTCPeerConnection.prototype.getDefaultIceServers = function () {
	return [];
};

RTCPeerConnection.prototype.createOffer = function (options) {
	var priv = this.priv;

	return new Promise(function (resolve, reject) {
		if (!priv.pc || priv.isClosed) return ThrowInvalidStateError();
		priv.pc.createOffer(function (type, sdp) {
			priv.lastOffer = sdp;
			resolve({
				type: type,
				sdp: sdp
			});
		}, reject, options);
	});
};

RTCPeerConnection.prototype.createAnswer = function (options) {
	var priv = this.priv;

	return new Promise(function (resolve, reject) {
		if (!priv.pc || priv.isClosed) return ThrowInvalidStateError();
		priv.pc.createAnswer(function (type, sdp) {
			priv.lastAnswer = sdp;
			resolve({
				type: type,
				sdp: sdp
			});
		}, reject, options);
	});
};

RTCPeerConnection.prototype.setLocalDescription = function (description) {
	var priv = this.priv;

	//If description.sdp is the empty string and description.type is "answer" or "pranswer", set description.sdp to lastAnswer.
	if (!description.sdp && ("answer" === description.type || "pranser" === description.type)) description.sdp = priv.lastAnswer;

	//If description.sdp is the empty string and description.type is "offer", set description.sdp to lastOffer.
	if (!description.sdp && "offer" === description.type) description.sdp = priv.lastOffer;

	return new Promise(function (resolve, reject) {
		if (!priv.pc || priv.isClosed) return ThrowInvalidStateError();
		priv.pc.setLocalDescription(function () {
			//If description is applied successfully:
			switch (description.type) {
				case "offer":
					//If description is of type "offer", set connection.pendingLocalDescription to description and signaling state to "have-local-offer".
					priv.pendingLocalDescription = description;
					break;
				case "answer":
					//If description is of type "answer", then this completes an offer answer negotiation. 
					//Set connection's currentLocalDescription to description and currentRemoteDescription to the value of pendingRemoteDescription . 
					//Set both pendingRemoteDescription and pendingLocalDescription to null. Finally set connection's signaling state to "stable"
					priv.currentLocalDescription = description;
					priv.currentRemoteDescription = priv.pendingRemoteDescription;
					priv.pendingLocalDescription = null;
					priv.pendingRemoteDescription = null;
					break;
				case "rollback":
					//If description is of type "rollback", then this is a rollback. Set connection.pendingLocalDescription to null and signaling state to "stable".
					priv.pendingLocalDescription = null;
					break;
				case "pranswer":
					//If description is of type "pranswer", then set connection.pendingLocalDescription to description and signaling state to "have-local-pranswer".
					priv.pendingLocalDescription = description;
					break;
			}
			//Resolve promiose
			resolve();
		}, reject, description);
	});
};

RTCPeerConnection.prototype.setRemoteDescription = function (description) {
	var priv = this.priv;

	return new Promise(function (resolve, reject) {
		if (!priv.pc || priv.isClosed) return ThrowInvalidStateError();
		priv.pc.setRemoteDescription(function () {
			//If description is applied successfully:
			switch (description.type) {
				case "offer":
					//If description is of type "offer", set connection.pendingRemoteDescription attribute to description and signaling state to "have-remote-offer".
					priv.pendingRemoteDescription = description;
					break;
				case "answer":
					//If description is of type "answer", then this completes an offer answer negotiation. 
					//Set connection's currentRemoteDescription to description and currentLocalDescription to the value of pendingLocalDescription . 
					//Set both pendingRemoteDescription and pendingLocalDescription to null. Finally set connection's signaling state to "stable"
					priv.currentRemoteDescription = description;
					priv.currentLocalDescription = priv.pendingLocalDescription;
					priv.pendingLocalDescription = null;
					priv.pendingRemoteDescription = null;
					break;
				case "rollback":
					//If description is of type "rollback", then this is a rollback. Set connection.pendingRemoteDescription to null and signaling state to "stable".
					priv.pendingRemoteDescription = null;
					break;
				case "pranswer":
					//If description is of type "pranswer", then set connection.pendingRemoteDescription to description and signaling state to "have-remote-pranswer".
					priv.pendingRemoteDescription = description;
					break;
			}
			//Resolve promiose
			resolve();
		}, reject, description);
	});
};

RTCPeerConnection.prototype.addIceCandidate = function (candidate) {
	var priv = this.priv;

	return new Promise(function (resolve, reject) {
		if (!priv.pc || priv.isClosed) return ThrowInvalidStateError();
		priv.pc.addIceCandidate(function (current, pending) {
			//Update current remote description sdp
			if (priv.currentRemoteDescriptiont) {
				if (current.length) priv.currentRemoteDescriptiont.sdp = current;else priv.currentRemoteDescriptiont.sdp = null;
			}
			//Update pending remote description sdp
			if (priv.pendingRemoteDescription) {
				if (pending.length) priv.pendingRemoteDescription.sdp = pending;else priv.pendingRemoteDescription.sdp = null;
			}
			//Resolve promise
			resolve();
		}, reject, candidate);
	});
};

RTCPeerConnection.prototype.close = function () {

	var priv = this.priv;
	if (!priv.pc || priv.isClosed) return ThrowInvalidStateError();
	//Close it
	priv.pc.close();
};
/*
partial interface RTCPeerConnection {
    sequence<RTCRtpSender>      getSenders();
    sequence<RTCRtpReceiver>    getReceivers();
    sequence<RTCRtpTransceiver> getTransceivers();
    RTCRtpSender                addTrack(MediaStreamTrack track, MediaStream... streams);
    void                        removeTrack(RTCRtpSender sender);
    RTCRtpTransceiver           addTransceiver((MediaStreamTrack or DOMString) trackOrKind, optional RTCRtpTransceiverInit init);
    attribute EventHandler ontrack;
};
*/
RTCPeerConnection.prototype.addTrack = function () {
	var priv = this.priv;

	if (!priv.pc || priv.isClosed) return ThrowInvalidStateError();

	//Parse arguments
	var track = arguments[0];
	var streams = Array.prototype.slice.call(arguments, 1);

	//Ensure that we are attaching to at most 1, as it is not supported in libwebrtc
	if (streams.length > 1) throw new Error("Adding track to more than one stream is not currently supported");

	//Get stream label, as it is the only param needed by libwebrtc
	var label = streams.length > 1 ? streams[0].label : "";

	//Add native track to native object it only needs the stream label not the stream
	var sender = priv.pc.addTrack(track.priv.track, label);

	//Check result
	if (!sender) return null;

	//Create sender
	var rtpSender = new RTCRtpSender(sender);

	//Get native sender id
	var senderId = rtpSender.priv.id;

	//Add to senders
	priv.senders[senderId] = rtpSender;

	return rtpSender;
};

RTCPeerConnection.prototype.addStream = function (stream) {
	var tracks = stream.getTracks();
	for (var i = 0; i < tracks.length; ++i) {
		this.addTrack(tracks[i], stream);
	}
};

RTCPeerConnection.prototype.removeTrack = function (rtpSender) {
	var priv = this.priv;

	if (!priv.pc || priv.isClosed) return ThrowInvalidStateError();

	//Check if sender is invalid
	if (!rtpSender || !rtpSender.priv.sender || !rtpSender.priv.track) return ThrowInvalidStateError();

	//Get native sender id
	var senderId = rtpSender.priv.id;

	//Check if senders is from this pc
	if (!priv.senders.hasOwnProperty(senderId)) return ThrowInvalidStateError();

	//Pass the nateive object
	priv.pc.removeTrack(rtpSender.priv.sender);

	//Set sender track to null
	rtpSender.priv.track = null;

	//Remove from senders
	delete priv.senders[senderId];
};

defineEventAttribute(RTCPeerConnection.prototype, "track");

module.exports = RTCPeerConnection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./RTCIceCandidate.js":5,"./WebRTCProxy.js":8,"event-target-shim/dist/event-target-shim.umd.js":9,"promise-polyfill":10}],7:[function(require,module,exports){
"use strict";

// This obvserver checks when a video element has been set a srcObj
var videoObserver = new MutationObserver(function (mutations) {
	console.log(mutations);
	for (var i = 0, numMutations = mutations.length; i < numMutations; i++) {
		var mutation = mutations[i];
		// HTML video element.
		if (mutation.target.videoRenderer) mutation.target.videoRenderer.mutate(mutation);
	}
});

var CLASSID = "CLSID:B8E874D9-72BA-4E54-B59B-3513081DF516";

function VideoRenderer(video) {
	var srcObject;

	//Store video element
	this.video = video;

	//Create a new video renderer object
	var object = this.object = document.createElement("object");
	//Set csid
	this.object.classid = CLASSID;
	//Apped it hidden
	video.appendChild(this.object);

	// Add .src observer to the video element.
	videoObserver.observe(video, {
		// Set to true if additions and removals of the target node's child elements (including text
		// nodes) are to be observed.
		childList: false,
		// Set to true if mutations to target's attributes are to be observed.
		attributes: true,
		// Set to true if mutations to target's data are to be observed.
		characterData: false,
		// Set to true if mutations to not just target, but also target's descendants are to be observed.
		subtree: false,
		// Set to true if attributes is set to true and target's attribute value before the mutation
		// needs to be recorded.
		attributeOldValue: true,
		// Set to true if characterData is set to true and target's data before the mutation needs to be
		// recorded.
		characterDataOldValue: false
		// Set to an array of attribute local names (without namespace) if not all attribute mutations
		// need to be observed.
		//attributeFilter: [ 'srcObject']
	});

	Object.defineProperty(video, 'srcObject', {
		enumerable: true,
		configurable: true,
		get: function get() {
			return srcObject;
		},
		set: function set(stream) {
			//Set native video track on video renderer object
			object.setTrack(stream.getVideoTracks()[0].priv.track);
			//Store it
			srcObject = stream;
		}
	});
}

VideoRenderer.prototype.mutate = function (mutation) {
	//Get mutation type
};

VideoRenderer.prototype.close = function () {
	//Hide video object
	this.hide();
	//Unobserver video element
	videoObserver.unobserve(this.video);
	//Remove srcObject property
	Object.defineProperty(this.video, 'srcObject');
	//delete object, IE only method
	this.object.removeNode(false);
	delete this.object;
};

VideoRenderer.handle = function (video) {
	if (!video.videoRenderer) video.videoRenderer = new VideoRenderer(video);
};

VideoRenderer.unhandle = function (video) {
	if (video.videoRenderer) {
		video.videoRender.close();
		delete video.videoRenderer;
	}
};

VideoRenderer.prototype.show = function () {
	//Check object is not shown
	if (this.video !== this.object.parentElement)
		//Nothing
		return;
	//Swap them
	this.video.parentNode.replaceChild(this.object);
	this.object.appendChild(this.video);
};

VideoRenderer.prototype.hide = function () {
	//Check object is not shown
	if (this.object !== this.video.parentElement)
		//Nothing
		return;
	//Swap them
	this.object.parentNode.replaceChild(this.video);
	this.video.appendChild(this.object);
};

module.exports = VideoRenderer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],8:[function(require,module,exports){
"use strict";

// Create singleton
var WebRTCProxy = new ActiveXObject("Cosmo.WebRTCProxy.1");

module.exports = WebRTCProxy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIldlYlJUQ1Byb3h5LmpzIl0sIm5hbWVzIjpbIldlYlJUQ1Byb3h5IiwiQWN0aXZlWE9iamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQSxJQUFJQSxjQUFjLElBQUlDLGFBQUosQ0FBa0IscUJBQWxCLENBQWxCOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCSCxXQUFqQiIsImZpbGUiOiJXZWJSVENQcm94eS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENyZWF0ZSBzaW5nbGV0b25cbnZhciBXZWJSVENQcm94eSA9IG5ldyBBY3RpdmVYT2JqZWN0KFwiQ29zbW8uV2ViUlRDUHJveHkuMVwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWJSVENQcm94eTsiXX0=
},{}],9:[function(require,module,exports){
/**
 * @author Toru Nagashima <https://github.com/mysticatea>
 * @copyright 2017 Toru Nagashima. All rights reserved.
 * See LICENSE file in root directory for full license.
 */(function(a,b){'object'==typeof exports&&'undefined'!=typeof module?b(exports):'function'==typeof define&&define.amd?define(['exports'],b):b(a.EventTargetShim={})})(this,function(a){'use strict';function b(a){var b=s.get(a);return console.assert(null!=b,'\'this\' is expected an Event object, but got',a),b}function c(a,b){s.set(this,{eventTarget:a,event:b,eventPhase:2,currentTarget:a,canceled:!1,stopped:!1,passiveListener:null,timeStamp:b.timeStamp||Date.now()}),Object.defineProperty(this,'isTrusted',{value:!1,enumerable:!0});for(var c,e=Object.keys(b),f=0;f<e.length;++f)c=e[f],c in this||Object.defineProperty(this,c,d(c))}function d(a){return{get:function(){return b(this).event[a]},set:function(c){b(this).event[a]=c},configurable:!0,enumerable:!0}}function e(a){return{value:function(){var c=b(this).event;return c[a].apply(c,arguments)},configurable:!0,enumerable:!0}}function f(a,b){function c(b,c){a.call(this,b,c)}var f=Object.keys(b);if(0===f.length)return a;c.prototype=Object.create(a.prototype,{constructor:{value:c,configurable:!0,writable:!0}});for(var g,h=0;h<f.length;++h)if(g=f[h],!(g in a.prototype)){var i=Object.getOwnPropertyDescriptor(b,g),j='function'==typeof i.value;Object.defineProperty(c.prototype,g,j?e(g):d(g))}return c}function g(a){if(null==a||a===Object.prototype)return c;var b=t.get(a);return null==b&&(b=f(g(Object.getPrototypeOf(a)),a),t.set(a,b)),b}function h(a,b){var c=g(Object.getPrototypeOf(b));return new c(a,b)}function i(a){return b(a).stopped}function j(a,c){b(a).eventPhase=c}function k(a,c){b(a).currentTarget=c}function l(a,c){b(a).passiveListener=c}function m(a){return null!==a&&'object'===('undefined'==typeof a?'undefined':u(a))}function n(a){var b=v.get(a);return console.assert(null!=b,'\'this\' is expected an EventTarget object, but got',a),b||new Map}function o(a){return{get:function(){for(var b=n(this),c=b.get(a);null!=c;){if(c.listenerType===y)return c.listener;c=c.next}return null},set:function(b){'function'==typeof b||m(b)||(b=null);for(var c=n(this),d=null,e=c.get(a);null!=e;)e.listenerType===y?null==d?null===e.next?c.delete(a):c.set(a,e.next):d.next=e.next:d=e,e=e.next;if(null!==b){var f={listener:b,listenerType:y,passive:!1,once:!1,next:null};null===d?c.set(a,f):d.next=f}},configurable:!0,enumerable:!0}}function p(a,b){Object.defineProperty(a,'on'+b,o(b))}function q(a){function b(){r.call(this)}b.prototype=Object.create(r.prototype,{constructor:{value:b,configurable:!0,writable:!0}});for(var c=0;c<a.length;++c)p(b.prototype,a[c]);return b}function r(){if(this instanceof r)return void v.set(this,new Map);if(1===arguments.length&&Array.isArray(arguments[0]))return q(arguments[0]);if(0<arguments.length){for(var a=Array(arguments.length),b=0;b<arguments.length;++b)a[b]=arguments[b];return q(a)}throw new TypeError('Cannot call a class as a function')}var s=new WeakMap,t=new WeakMap;c.prototype={get type(){return b(this).event.type},get target(){return b(this).eventTarget},get currentTarget(){return b(this).currentTarget},composedPath:function(){var a=b(this).currentTarget;return null==a?[]:[a]},get NONE(){return 0},get CAPTURING_PHASE(){return 1},get AT_TARGET(){return 2},get BUBBLING_PHASE(){return 3},get eventPhase(){return b(this).eventPhase},stopPropagation:function(){var a=b(this);'function'==typeof a.event.stopPropagation&&a.event.stopPropagation()},stopImmediatePropagation:function(){var a=b(this);a.stopped=!0,'function'==typeof a.event.stopImmediatePropagation&&a.event.stopImmediatePropagation()},get bubbles(){return!!b(this).event.bubbles},get cancelable(){return!!b(this).event.cancelable},preventDefault:function(){var a=b(this);return null==a.passiveListener?void(!a.event.cancelable||(a.canceled=!0,'function'==typeof a.event.preventDefault&&a.event.preventDefault())):void console.warn('Event#preventDefault() was called from a passive listener:',a.passiveListener)},get defaultPrevented(){return b(this).canceled},get composed(){return!!b(this).event.composed},get timeStamp(){return b(this).timeStamp}},Object.defineProperty(c.prototype,'constructor',{value:c,configurable:!0,writable:!0}),'undefined'!=typeof window&&'undefined'!=typeof window.Event&&(Object.setPrototypeOf(c.prototype,window.Event.prototype),t.set(window.Event.prototype,c));var u='function'==typeof Symbol&&'symbol'==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&'function'==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?'symbol':typeof a},v=new WeakMap,w=1,x=2,y=3;if(r.prototype={addEventListener:function(a,b,c){if(null==b)return!1;if('function'!=typeof b&&!m(b))throw new TypeError('\'listener\' should be a function or an object.');var d=n(this),e=m(c),f=e?!!c.capture:!!c,g=f?w:x,h={listener:b,listenerType:g,passive:e&&!!c.passive,once:e&&!!c.once,next:null},i=d.get(a);if(void 0===i)return d.set(a,h),!0;for(var j=null;null!=i;){if(i.listener===b&&i.listenerType===g)return!1;j=i,i=i.next}return j.next=h,!0},removeEventListener:function(a,b,c){if(null==b)return!1;for(var d=n(this),e=m(c)?!!c.capture:!!c,f=e?w:x,g=null,h=d.get(a);null!=h;){if(h.listener===b&&h.listenerType===f)return null==g?null===h.next?d.delete(a):d.set(a,h.next):g.next=h.next,!0;g=h,h=h.next}return!1},dispatchEvent:function(a){if(null==a||'string'!=typeof a.type)throw new TypeError('"event.type" should be a string.');var b=n(this),c=a.type,d=b.get(c);if(null==d)return!0;for(var e=h(this,a),f=null;null!=d&&(d.once?null==f?null===d.next?b.delete(c):b.set(c,d.next):f.next=d.next:f=d,l(e,d.passive?d.listener:null),'function'==typeof d.listener?d.listener.call(this,e):d.listenerType!==y&&'function'==typeof d.listener.handleEvent&&d.listener.handleEvent(e),!i(e));)d=d.next;return l(e,null),j(e,0),k(e,null),!e.defaultPrevented}},Object.defineProperty(r.prototype,'constructor',{value:r,configurable:!0,writable:!0}),'undefined'!=typeof window&&'undefined'!=typeof window.EventTarget&&Object.setPrototypeOf(r.prototype,window.EventTarget.prototype),a.defineEventAttribute=p,a.EventTarget=r,a['default']=r,Object.defineProperty(a,'__esModule',{value:!0}),'undefined'==typeof module&&'undefined'==typeof define){const a=Function('return this');a.EventTargetShim=r,a.EventTargetShim.defineEventAttribute=p}});
//# sourceMappingURL=event-target-shim.umd.js.map

},{}],10:[function(require,module,exports){
(function (root) {

  // Store setTimeout reference so promise-polyfill will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var setTimeoutFunc = setTimeout;

  function noop() {}
  
  // Polyfill for Function.prototype.bind
  function bind(fn, thisArg) {
    return function () {
      fn.apply(thisArg, arguments);
    };
  }

  function Promise(fn) {
    if (!(this instanceof Promise)) throw new TypeError('Promises must be constructed via new');
    if (typeof fn !== 'function') throw new TypeError('not a function');
    this._state = 0;
    this._handled = false;
    this._value = undefined;
    this._deferreds = [];

    doResolve(fn, this);
  }

  function handle(self, deferred) {
    while (self._state === 3) {
      self = self._value;
    }
    if (self._state === 0) {
      self._deferreds.push(deferred);
      return;
    }
    self._handled = true;
    Promise._immediateFn(function () {
      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
      if (cb === null) {
        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
        return;
      }
      var ret;
      try {
        ret = cb(self._value);
      } catch (e) {
        reject(deferred.promise, e);
        return;
      }
      resolve(deferred.promise, ret);
    });
  }

  function resolve(self, newValue) {
    try {
      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');
      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
        var then = newValue.then;
        if (newValue instanceof Promise) {
          self._state = 3;
          self._value = newValue;
          finale(self);
          return;
        } else if (typeof then === 'function') {
          doResolve(bind(then, newValue), self);
          return;
        }
      }
      self._state = 1;
      self._value = newValue;
      finale(self);
    } catch (e) {
      reject(self, e);
    }
  }

  function reject(self, newValue) {
    self._state = 2;
    self._value = newValue;
    finale(self);
  }

  function finale(self) {
    if (self._state === 2 && self._deferreds.length === 0) {
      Promise._immediateFn(function() {
        if (!self._handled) {
          Promise._unhandledRejectionFn(self._value);
        }
      });
    }

    for (var i = 0, len = self._deferreds.length; i < len; i++) {
      handle(self, self._deferreds[i]);
    }
    self._deferreds = null;
  }

  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  /**
   * Take a potentially misbehaving resolver function and make sure
   * onFulfilled and onRejected are only called once.
   *
   * Makes no guarantees about asynchrony.
   */
  function doResolve(fn, self) {
    var done = false;
    try {
      fn(function (value) {
        if (done) return;
        done = true;
        resolve(self, value);
      }, function (reason) {
        if (done) return;
        done = true;
        reject(self, reason);
      });
    } catch (ex) {
      if (done) return;
      done = true;
      reject(self, ex);
    }
  }

  Promise.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };

  Promise.prototype.then = function (onFulfilled, onRejected) {
    var prom = new (this.constructor)(noop);

    handle(this, new Handler(onFulfilled, onRejected, prom));
    return prom;
  };

  Promise.all = function (arr) {
    return new Promise(function (resolve, reject) {
      if (!arr || typeof arr.length === 'undefined') throw new TypeError('Promise.all accepts an array');
      var args = Array.prototype.slice.call(arr);
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        try {
          if (val && (typeof val === 'object' || typeof val === 'function')) {
            var then = val.then;
            if (typeof then === 'function') {
              then.call(val, function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
          args[i] = val;
          if (--remaining === 0) {
            resolve(args);
          }
        } catch (ex) {
          reject(ex);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise.resolve = function (value) {
    if (value && typeof value === 'object' && value.constructor === Promise) {
      return value;
    }

    return new Promise(function (resolve) {
      resolve(value);
    });
  };

  Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
      reject(value);
    });
  };

  Promise.race = function (values) {
    return new Promise(function (resolve, reject) {
      for (var i = 0, len = values.length; i < len; i++) {
        values[i].then(resolve, reject);
      }
    });
  };

  // Use polyfill for setImmediate for performance gains
  Promise._immediateFn = (typeof setImmediate === 'function' && function (fn) { setImmediate(fn); }) ||
    function (fn) {
      setTimeoutFunc(fn, 0);
    };

  Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {
    if (typeof console !== 'undefined' && console) {
      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
    }
  };

  /**
   * Set the immediate function to execute callbacks
   * @param fn {function} Function to execute
   * @deprecated
   */
  Promise._setImmediateFn = function _setImmediateFn(fn) {
    Promise._immediateFn = fn;
  };

  /**
   * Change the function to execute on unhandled rejection
   * @param {function} fn Function to execute on unhandled rejection
   * @deprecated
   */
  Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {
    Promise._unhandledRejectionFn = fn;
  };
  
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = Promise;
  } else if (!root.Promise) {
    root.Promise = Promise;
  }

})(this);

},{}]},{},[1])(1)
});